// Code generated by "stringer -type=FeatureID,Vendor"; DO NOT EDIT.

package cpuid

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ADX-1]
	_ = x[AESNI-2]
	_ = x[AMD3DNOW-3]
	_ = x[AMD3DNOWEXT-4]
	_ = x[AMXBF16-5]
	_ = x[AMXFP16-6]
	_ = x[AMXINT8-7]
	_ = x[AMXTILE-8]
	_ = x[AVX-9]
	_ = x[AVX2-10]
	_ = x[AVX512BF16-11]
	_ = x[AVX512BITALG-12]
	_ = x[AVX512BW-13]
	_ = x[AVX512CD-14]
	_ = x[AVX512DQ-15]
	_ = x[AVX512ER-16]
	_ = x[AVX512F-17]
	_ = x[AVX512FP16-18]
	_ = x[AVX512IFMA-19]
	_ = x[AVX512PF-20]
	_ = x[AVX512VBMI-21]
	_ = x[AVX512VBMI2-22]
	_ = x[AVX512VL-23]
	_ = x[AVX512VNNI-24]
	_ = x[AVX512VP2INTERSECT-25]
	_ = x[AVX512VPOPCNTDQ-26]
	_ = x[AVXIFMA-27]
	_ = x[AVXNECONVERT-28]
	_ = x[AVXSLOW-29]
	_ = x[AVXVNNI-30]
	_ = x[AVXVNNIINT8-31]
	_ = x[BMI1-32]
	_ = x[BMI2-33]
	_ = x[CETIBT-34]
	_ = x[CETSS-35]
	_ = x[CLDEMOTE-36]
	_ = x[CLMUL-37]
	_ = x[CLZERO-38]
	_ = x[CMOV-39]
	_ = x[CMPCCXADD-40]
	_ = x[CMPSB_SCADBS_SHORT-41]
	_ = x[CMPXCHG8-42]
	_ = x[CPBOOST-43]
	_ = x[CPPC-44]
	_ = x[CX16-45]
	_ = x[EFER_LMSLE_UNS-46]
	_ = x[ENQCMD-47]
	_ = x[ERMS-48]
	_ = x[F16C-49]
	_ = x[FLUSH_L1D-50]
	_ = x[FMA3-51]
	_ = x[FMA4-52]
	_ = x[FP128-53]
	_ = x[FP256-54]
	_ = x[FSRM-55]
	_ = x[FXSR-56]
	_ = x[FXSROPT-57]
	_ = x[GFNI-58]
	_ = x[HLE-59]
	_ = x[HRESET-60]
	_ = x[HTT-61]
	_ = x[HWA-62]
	_ = x[HYBRID_CPU-63]
	_ = x[HYPERVISOR-64]
	_ = x[IA32_ARCH_CAP-65]
	_ = x[IA32_CORE_CAP-66]
	_ = x[IBPB-67]
	_ = x[IBRS-68]
	_ = x[IBRS_PREFERRED-69]
	_ = x[IBRS_PROVIDES_SMP-70]
	_ = x[IBS-71]
	_ = x[IBSBRNTRGT-72]
	_ = x[IBSFETCHSAM-73]
	_ = x[IBSFFV-74]
	_ = x[IBSOPCNT-75]
	_ = x[IBSOPCNTEXT-76]
	_ = x[IBSOPSAM-77]
	_ = x[IBSRDWROPCNT-78]
	_ = x[IBSRIPINVALIDCHK-79]
	_ = x[IBS_FETCH_CTLX-80]
	_ = x[IBS_OPDATA4-81]
	_ = x[IBS_OPFUSE-82]
	_ = x[IBS_PREVENTHOST-83]
	_ = x[IBS_ZEN4-84]
	_ = x[INT_WBINVD-85]
	_ = x[INVLPGB-86]
	_ = x[LAHF-87]
	_ = x[LAM-88]
	_ = x[LBRVIRT-89]
	_ = x[LZCNT-90]
	_ = x[MCAOVERFLOW-91]
	_ = x[MCDT_NO-92]
	_ = x[MCOMMIT-93]
	_ = x[MD_CLEAR-94]
	_ = x[MMX-95]
	_ = x[MMXEXT-96]
	_ = x[MOVBE-97]
	_ = x[MOVDIR64B-98]
	_ = x[MOVDIRI-99]
	_ = x[MOVSB_ZL-100]
	_ = x[MOVU-101]
	_ = x[MPX-102]
	_ = x[MSRIRC-103]
	_ = x[MSR_PAGEFLUSH-104]
	_ = x[NRIPS-105]
	_ = x[NX-106]
	_ = x[OSXSAVE-107]
	_ = x[PCONFIG-108]
	_ = x[POPCNT-109]
	_ = x[PPIN-110]
	_ = x[PREFETCHI-111]
	_ = x[PSFD-112]
	_ = x[RDPRU-113]
	_ = x[RDRAND-114]
	_ = x[RDSEED-115]
	_ = x[RDTSCP-116]
	_ = x[RTM-117]
	_ = x[RTM_ALWAYS_ABORT-118]
	_ = x[SERIALIZE-119]
	_ = x[SEV-120]
	_ = x[SEV_64BIT-121]
	_ = x[SEV_ALTERNATIVE-122]
	_ = x[SEV_DEBUGSWAP-123]
	_ = x[SEV_ES-124]
	_ = x[SEV_RESTRICTED-125]
	_ = x[SEV_SNP-126]
	_ = x[SGX-127]
	_ = x[SGXLC-128]
	_ = x[SHA-129]
	_ = x[SME-130]
	_ = x[SME_COHERENT-131]
	_ = x[SPEC_CTRL_SSBD-132]
	_ = x[SRBDS_CTRL-133]
	_ = x[SSE-134]
	_ = x[SSE2-135]
	_ = x[SSE3-136]
	_ = x[SSE4-137]
	_ = x[SSE42-138]
	_ = x[SSE4A-139]
	_ = x[SSSE3-140]
	_ = x[STIBP-141]
	_ = x[STIBP_ALWAYSON-142]
	_ = x[STOSB_SHORT-143]
	_ = x[SUCCOR-144]
	_ = x[SVM-145]
	_ = x[SVMDA-146]
	_ = x[SVMFBASID-147]
	_ = x[SVML-148]
	_ = x[SVMNP-149]
	_ = x[SVMPF-150]
	_ = x[SVMPFT-151]
	_ = x[SYSCALL-152]
	_ = x[SYSEE-153]
	_ = x[TBM-154]
	_ = x[TLB_FLUSH_NESTED-155]
	_ = x[TME-156]
	_ = x[TOPEXT-157]
	_ = x[TSCRATEMSR-158]
	_ = x[TSXLDTRK-159]
	_ = x[VAES-160]
	_ = x[VMCBCLEAN-161]
	_ = x[VMPL-162]
	_ = x[VMSA_REGPROT-163]
	_ = x[VMX-164]
	_ = x[VPCLMULQDQ-165]
	_ = x[VTE-166]
	_ = x[WAITPKG-167]
	_ = x[WBNOINVD-168]
	_ = x[X87-169]
	_ = x[XGETBV1-170]
	_ = x[XOP-171]
	_ = x[XSAVE-172]
	_ = x[XSAVEC-173]
	_ = x[XSAVEOPT-174]
	_ = x[XSAVES-175]
	_ = x[AESARM-176]
	_ = x[ARMCPUID-177]
	_ = x[ASIMD-178]
	_ = x[ASIMDDP-179]
	_ = x[ASIMDHP-180]
	_ = x[ASIMDRDM-181]
	_ = x[ATOMICS-182]
	_ = x[CRC32-183]
	_ = x[DCPOP-184]
	_ = x[EVTSTRM-185]
	_ = x[FCMA-186]
	_ = x[FP-187]
	_ = x[FPHP-188]
	_ = x[GPA-189]
	_ = x[JSCVT-190]
	_ = x[LRCPC-191]
	_ = x[PMULL-192]
	_ = x[SHA1-193]
	_ = x[SHA2-194]
	_ = x[SHA3-195]
	_ = x[SHA512-196]
	_ = x[SM3-197]
	_ = x[SM4-198]
	_ = x[SVE-199]
	_ = x[lastID-200]
	_ = x[firstID-0]
}

const _FeatureID_name = "firstIDADXAESNIAMD3DNOWAMD3DNOWEXTAMXBF16AMXFP16AMXINT8AMXTILEAVXAVX2AVX512BF16AVX512BITALGAVX512BWAVX512CDAVX512DQAVX512ERAVX512FAVX512FP16AVX512IFMAAVX512PFAVX512VBMIAVX512VBMI2AVX512VLAVX512VNNIAVX512VP2INTERSECTAVX512VPOPCNTDQAVXIFMAAVXNECONVERTAVXSLOWAVXVNNIAVXVNNIINT8BMI1BMI2CETIBTCETSSCLDEMOTECLMULCLZEROCMOVCMPCCXADDCMPSB_SCADBS_SHORTCMPXCHG8CPBOOSTCPPCCX16EFER_LMSLE_UNSENQCMDERMSF16CFLUSH_L1DFMA3FMA4FP128FP256FSRMFXSRFXSROPTGFNIHLEHRESETHTTHWAHYBRID_CPUHYPERVISORIA32_ARCH_CAPIA32_CORE_CAPIBPBIBRSIBRS_PREFERREDIBRS_PROVIDES_SMPIBSIBSBRNTRGTIBSFETCHSAMIBSFFVIBSOPCNTIBSOPCNTEXTIBSOPSAMIBSRDWROPCNTIBSRIPINVALIDCHKIBS_FETCH_CTLXIBS_OPDATA4IBS_OPFUSEIBS_PREVENTHOSTIBS_ZEN4INT_WBINVDINVLPGBLAHFLAMLBRVIRTLZCNTMCAOVERFLOWMCDT_NOMCOMMITMD_CLEARMMXMMXEXTMOVBEMOVDIR64BMOVDIRIMOVSB_ZLMOVUMPXMSRIRCMSR_PAGEFLUSHNRIPSNXOSXSAVEPCONFIGPOPCNTPPINPREFETCHIPSFDRDPRURDRANDRDSEEDRDTSCPRTMRTM_ALWAYS_ABORTSERIALIZESEVSEV_64BITSEV_ALTERNATIVESEV_DEBUGSWAPSEV_ESSEV_RESTRICTEDSEV_SNPSGXSGXLCSHASMESME_COHERENTSPEC_CTRL_SSBDSRBDS_CTRLSSESSE2SSE3SSE4SSE42SSE4ASSSE3STIBPSTIBP_ALWAYSONSTOSB_SHORTSUCCORSVMSVMDASVMFBASIDSVMLSVMNPSVMPFSVMPFTSYSCALLSYSEETBMTLB_FLUSH_NESTEDTMETOPEXTTSCRATEMSRTSXLDTRKVAESVMCBCLEANVMPLVMSA_REGPROTVMXVPCLMULQDQVTEWAITPKGWBNOINVDX87XGETBV1XOPXSAVEXSAVECXSAVEOPTXSAVESAESARMARMCPUIDASIMDASIMDDPASIMDHPASIMDRDMATOMICSCRC32DCPOPEVTSTRMFCMAFPFPHPGPAJSCVTLRCPCPMULLSHA1SHA2SHA3SHA512SM3SM4SVElastID"

var _FeatureID_index = [...]uint16{0, 7, 10, 15, 23, 34, 41, 48, 55, 62, 65, 69, 79, 91, 99, 107, 115, 123, 130, 140, 150, 158, 168, 179, 187, 197, 215, 230, 237, 249, 256, 263, 274, 278, 282, 288, 293, 301, 306, 312, 316, 325, 343, 351, 358, 362, 366, 380, 386, 390, 394, 403, 407, 411, 416, 421, 425, 429, 436, 440, 443, 449, 452, 455, 465, 475, 488, 501, 505, 509, 523, 540, 543, 553, 564, 570, 578, 589, 597, 609, 625, 639, 650, 660, 675, 683, 693, 700, 704, 707, 714, 719, 730, 737, 744, 752, 755, 761, 766, 775, 782, 790, 794, 797, 803, 816, 821, 823, 830, 837, 843, 847, 856, 860, 865, 871, 877, 883, 886, 902, 911, 914, 923, 938, 951, 957, 971, 978, 981, 986, 989, 992, 1004, 1018, 1028, 1031, 1035, 1039, 1043, 1048, 1053, 1058, 1063, 1077, 1088, 1094, 1097, 1102, 1111, 1115, 1120, 1125, 1131, 1138, 1143, 1146, 1162, 1165, 1171, 1181, 1189, 1193, 1202, 1206, 1218, 1221, 1231, 1234, 1241, 1249, 1252, 1259, 1262, 1267, 1273, 1281, 1287, 1293, 1301, 1306, 1313, 1320, 1328, 1335, 1340, 1345, 1352, 1356, 1358, 1362, 1365, 1370, 1375, 1380, 1384, 1388, 1392, 1398, 1401, 1404, 1407, 1413}

func (i FeatureID) String() string {
	if i < 0 || i >= FeatureID(len(_FeatureID_index)-1) {
		return "FeatureID(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _FeatureID_name[_FeatureID_index[i]:_FeatureID_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[VendorUnknown-0]
	_ = x[Intel-1]
	_ = x[AMD-2]
	_ = x[VIA-3]
	_ = x[Transmeta-4]
	_ = x[NSC-5]
	_ = x[KVM-6]
	_ = x[MSVM-7]
	_ = x[VMware-8]
	_ = x[XenHVM-9]
	_ = x[Bhyve-10]
	_ = x[Hygon-11]
	_ = x[SiS-12]
	_ = x[RDC-13]
	_ = x[Ampere-14]
	_ = x[ARM-15]
	_ = x[Broadcom-16]
	_ = x[Cavium-17]
	_ = x[DEC-18]
	_ = x[Fujitsu-19]
	_ = x[Infineon-20]
	_ = x[Motorola-21]
	_ = x[NVIDIA-22]
	_ = x[AMCC-23]
	_ = x[Qualcomm-24]
	_ = x[Marvell-25]
	_ = x[lastVendor-26]
}

const _Vendor_name = "VendorUnknownIntelAMDVIATransmetaNSCKVMMSVMVMwareXenHVMBhyveHygonSiSRDCAmpereARMBroadcomCaviumDECFujitsuInfineonMotorolaNVIDIAAMCCQualcommMarvelllastVendor"

var _Vendor_index = [...]uint8{0, 13, 18, 21, 24, 33, 36, 39, 43, 49, 55, 60, 65, 68, 71, 77, 80, 88, 94, 97, 104, 112, 120, 126, 130, 138, 145, 155}

func (i Vendor) String() string {
	if i < 0 || i >= Vendor(len(_Vendor_index)-1) {
		return "Vendor(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Vendor_name[_Vendor_index[i]:_Vendor_index[i+1]]
}
